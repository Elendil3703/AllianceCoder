{"prompt": "\"\"\"\nHelper functions for testing.\n\"\"\"\nfrom pathlib import Path\nfrom tempfile import TemporaryDirectory\nimport locale\nimport logging\nimport os\nimport subprocess\nimport sys\n\nimport matplotlib as mpl\nfrom matplotlib import _api\n\n_log = logging.getLogger(__name__)\n\n\ndef set_font_settings_for_testing():\n    mpl.rcParams['font.family'] = 'DejaVu Sans'\n    mpl.rcParams['text.hinting'] = 'none'\n    mpl.rcParams['text.hinting_factor'] = 8\n\n\ndef set_reproducibility_for_testing():\n    mpl.rcParams['svg.hashsalt'] = 'matplotlib'\n\n\ndef setup():\n    # The baseline images are created in this locale, so we should use\n    # it during all of the tests.\n\n    try:\n        locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')\n    except locale.Error:\n        try:\n            locale.setlocale(locale.LC_ALL, 'English_United States.1252')\n        except locale.Error:\n            _log.warning(\n                \"Could not set locale to English/United States. \"\n                \"Some date-related tests may fail.\")\n\n    mpl.use('Agg')\n\n    with _api.suppress_matplotlib_deprecation_warning():\n        mpl.rcdefaults()  # Start with all defaults\n\n    # These settings *must* be hardcoded for running the comparison tests and\n    # are not necessarily the default values as specified in rcsetup.py.\n    set_font_settings_for_testing()\n    set_reproducibility_for_testing()\n\n\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \"\"\"\n    Run a function in a sub-process.\n\n    Parameters\n    ----------\n    func : function\n        The function to be run.  It must be in a module that is importable.\n    *args : str\n        Any additional command line arguments to be passed in\n        the first argument to ``subprocess.run``.\n    extra_env : dict[str, str]\n        Any additional environment variables to be set for the subprocess.\n    \"\"\"\n    target = func.__name__\n    module = func.__module__\n    proc = subprocess.run(\n        [sys.executable,\n         \"-c\",\n         f\"from {module} import {target}; {target}()\",\n         *args],\n        env={**os.environ, \"SOURCE_DATE_EPOCH\": \"0\", **(extra_env or {})},\n        timeout=timeout, check=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        universal_newlines=True)\n    return proc\n\n\ndef _check_for_pgf(texsystem):\n    \"\"\"\n    Check if a given TeX system + pgf is available\n\n    Parameters\n    ----------\n    texsystem : str\n        The executable name to check\n    \"\"\"\n    with TemporaryDirectory() as tmpdir:\n        tex_path = Path(tmpdir, \"test.tex\")\n        tex_path.write_text(r\"\"\"\n            \\documentclass{minimal}\n            \\usepackage{pgf}\n            \\begin{document}\n            \\typeout{pgfversion=\\pgfversion}\n            \\makeatletter\n            \\@@end\n        \"\"\", encoding=\"utf-8\")\n        try:\n            subprocess.check_call(\n                [texsystem, \"-halt-on-error\", str(tex_path)], cwd=tmpdir,\n                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        except (OSError, subprocess.CalledProcessError):\n            return False\n        return True\n\n\ndef _has_tex_package(package):\n    try:\n        mpl.dviread._find_tex_file(f\"{package}.sty\")\n        return True\n    except FileNotFoundError:\n        return False\nimport subprocess\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \"\"\"\n    Run a function in a sub-process.\n\n    Parameters\n    ----------\n    func : function\n        The function to be run.  It must be in a module that is importable.\n    *args : str\n        Any additional command line arguments to be passed in\n        the first argument to ``subprocess.run``.\n    extra_env : dict[str, str]\n        Any additional environment variables to be set for the subprocess.\n    \"\"\"", "metadata": {"ground_truth": "import subprocess\ndef subprocess_run_helper(func, *args, timeout, extra_env=None):\n    \"\"\"\n    Run a function in a sub-process.\n\n    Parameters\n    ----------\n    func : function\n        The function to be run.  It must be in a module that is importable.\n    *args : str\n        Any additional command line arguments to be passed in\n        the first argument to ``subprocess.run``.\n    extra_env : dict[str, str]\n        Any additional environment variables to be set for the subprocess.\n    \"\"\"\n    target = func.__name__\n    module = func.__module__\n    proc = subprocess.run(\n        [sys.executable,\n         \"-c\",\n         f\"from {module} import {target}; {target}()\",\n         *args],\n        env={**os.environ, \"SOURCE_DATE_EPOCH\": \"0\", **(extra_env or {})},\n        timeout=timeout, check=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        universal_newlines=True)\n    return proc\n", "fpath_tuple": ["lib", "matplotlib", "testing", "__init__.py"], "function_name": "subprocess_run_helper", "lineno": 53, "context_start_lineno": 0, "_id": "62ece4992e6aefcf4aabbd7d", "task_id": "lib/id0"}}
