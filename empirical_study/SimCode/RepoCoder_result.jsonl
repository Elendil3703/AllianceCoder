{"_id": "62ece4982e6aefcf4aabbd68", "generate_results": ["def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \"\"\"\n    Convert a number to a string, using the given alphabet.\n\n    The output has the most significant digit first.\n    \"\"\"\n    base = len(alphabet)\n    result = \"\"\n    while number > 0:\n        result = alphabet[number % base] + result\n        number //= base\n    if padding is not None and len(result) < padding:\n        result = alphabet[0] * (padding - len(result)) + result\n    return result", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \"\"\"\n    Convert a number to a string, using the given alphabet.\n\n    The output has the most significant digit first.\n    \"\"\"\n    base = len(alphabet)\n    result = \"\"\n    while number > 0:\n        result = alphabet[number % base] + result\n        number //= base\n    if padding is not None and len(result) < padding:\n        result = alphabet[0] * (padding - len(result)) + result\n    return result", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \"\"\"\n    Convert a number to a string, using the given alphabet.\n\n    The output has the most significant digit first.\n    \"\"\"\n    base = len(alphabet)\n    result = \"\"\n    while number > 0:\n        result = alphabet[number % base] + result\n        number //= base\n    if padding is not None and len(result) < padding:\n        result = \"0\" * (padding - len(result)) + result\n    return result", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \"\"\"\n    Convert a number to a string, using the given alphabet.\n\n    The output has the most significant digit first.\n    \"\"\"\n    base = len(alphabet)\n    if number == 0:\n        return alphabet[0] * padding if padding else alphabet[0]\n\n    result = \"\"\n    while number > 0:\n        result = alphabet[number % base] + result\n        number //= base\n\n    if padding and len(result) < padding:\n        result = alphabet[0] * (padding - len(result)) + result\n\n    return result", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    \"\"\"\n    Convert a number to a string, using the given alphabet.\n\n    The output has the most significant digit first.\n    \"\"\"\n    base = len(alphabet)\n    result = \"\"\n    while number > 0:\n        result = alphabet[number % base] + result\n        number //= base\n    if padding is not None and len(result) < padding:\n        result = alphabet[0] * (padding - len(result)) + result\n    return result"]}
{"_id": "62ece4982e6aefcf4aabbd6d", "generate_results": ["def string_to_int(string: str, alphabet: List[str]) -> int:\n    \"\"\"\n    Convert a string to a n, using the given alphabet.\n    The input is assumed to have the most significant digit first.\n    \"\"\"\n    base = len(alphabet)\n    result = 0\n    for char in string:\n        result = result * base + alphabet.index(char)\n    return result", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    \"\"\"\n    Convert a string to a n, using the given alphabet.\n    The input is assumed to have the most significant digit first.\n    \"\"\"\n    base = len(alphabet)\n    result = 0\n    for char in string:\n        result = result * base + alphabet.index(char)\n    return result", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    \"\"\"\n    Convert a string to a n, using the given alphabet.\n    The input is assumed to have the most significant digit first.\n    \"\"\"\n    base = len(alphabet)\n    result = 0\n    for char in string:\n        result = result * base + alphabet.index(char)\n    return result", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    \"\"\"\n    Convert a string to a n, using the given alphabet.\n    The input is assumed to have the most significant digit first.\n    \"\"\"\n    base = len(alphabet)\n    result = 0\n    for digit in string:\n        result = result * base + alphabet.index(digit)\n    return result", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    \"\"\"\n    Convert a string to a n, using the given alphabet.\n    The input is assumed to have the most significant digit first.\n    \"\"\"\n    base = len(alphabet)\n    result = 0\n    for char in string:\n        result = result * base + alphabet.index(char)\n    return result"]}
