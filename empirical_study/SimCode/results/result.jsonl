{"prompt": "# Here are some relevant code fragments from other files of the repo:\n# --------------------------------------------------\n# the below code fragment can be found in:\n# validation.py\n# --------------------------------------------------\n# \n#     A string is considered snake case when:\n# \n#     - it's composed only by lowercase/uppercase letters and digits\n#     - it contains at least one underscore (or provided separator)\n#     - it does not start with a number\n# \n#     *Examples:*\n# \n#     >>> is_snake_case('foo_bar_baz') # returns true\n#     >>> is_snake_case('foo') # returns false\n# \n#     :param input_string: String to test.\n#     :type input_string: str\n#     :param separator: String to use as separator.\n#     :type separator: str\n#     :return: True for a snake case string, false otherwise.\n#     \"\"\"\n# _full#         re_map = {\n# --------------------------------------------------\n# the below code fragment can be found in:\n# validation.py\n# --------------------------------------------------\n#     :param input_string: String to check\n#     :type input_string: str\n#     :return: True if the string represents a number, false otherwise\n#     \"\"\"\n#     if not isinstance(input_string, str):\n# # #  NUMBER_RE.match(input_string) is not None\n# \n# \n# def is_integer(input_string: str) -> bool:\n#     \"\"\"\n#     Checks whether the given string represents an integer or not.\n# \n#     An integer may be signed or unsigned or use a \"scientific notation\".\n# \n#     *Examples:*\n# \n#     >>> is_integer('42') # returns true\n#     >>> is_integer('42.0') # returns false\n# --------------------------------------------------\n# the below code fragment can be found in:\n# validation.py\n# --------------------------------------------------\n# \n#     *Examples:*\n# \n#     >>> contains_html('my string is <strong>bold</strong>') # returns true\n#     >>> contains_html('my string is not bold') # returns false\n# \n#     :param Text to check\n#     type input_string: str\n#     :return: True if string contains html, false otherwise.\n#     \"\"\"\n#     if not is_string(input_string):\n#         raise InvalidInputError(input_string)\n# \n#     return HTML_RE.search(input_string) is not None\n# \n# \n# def words_count(input_string: str) > int:\n#     \"\"\"\n#     Returns the number of words contained into the given string.\n# --------------------------------------------------\n# the below code fragment can be found in:\n# validation.py\n# --------------------------------------------------\n# \n#     :param obj: Object to test.\n#     :return: True if string, false otherwise.\n#     \"\"\"\n#     return isinstance(obj, str)\n# \n# \n# def is_full_string(input_string: Any) -> bool:\n#     \"\"\"\n#     Check if a string is not empty (it must contains at least one non space character).\n# \n#     *Examples:*\n# \n#     >>> is_full_string(None) # returns false\n#     >>> is_full_string('') # returns false\n#     >>> is_full_string(' ') # returns false\n#     >>> is_full_string('hello') # returns true\n# \n#     :param input_string: String to check.\n#     :type input_string: str\n# --------------------------------------------------\n# the below code fragment can be found in:\n# validation.py\n# --------------------------------------------------\n#     or use the \"scientific notation\" (eg: e5).\n# \n#     *Examples:*\n# \n#     >>> is_number('42') # returns true\n#     >>> is_number('19.99') # returns true\n#     >>> is_number('-9.12') # returns true\n#     >>> is_number('1e3') # returns true\n#     >>> is_number('1 2 3') # returns false\n# \n#     :param input_string: String to check\n#     :type input_string: str\n#     :return: True if the string represents a number, false otherwise\n#     \"\"\"\n#     if not isinstance(input_string, str):\n#         raise InvalidInputError(input_string)\n# \n#     return NUMBER_RE.match(input_string) is not None\n# \n# --------------------------------------------------\n\ndef reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n## Complete the unfinished function.\n## Ensure that you provide the **full** function, including both the function signature and the function body.\n## Do **not** include anything else\u2014only the complete function.\n\n", "choices": ["def reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n    return input_string[::-1]", "def reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n    return input_string[::-1]", "def reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n    return input_string[::-1]", "def reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n    return input_string[::-1]", "def reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n    return input_string[::-1]"], "metadata": {"task_id": "string_utils/id0", "ground_truth": "def reverse(input_string: str) -> str:\n    \"\"\"\n    Returns the string with its chars reversed.\n\n    *Example:*\n\n    >>> reverse('hello') # returns 'olleh'\n\n    :param input_string: String to revert.\n    :type input_string: str\n    :return: Reversed string.\n    \"\"\"\n    if not is_string(input_string):\n        raise InvalidInputError(input_string)\n\n    return input_string[::-1]", "function_name": "reverse", "_id": 0, "fpath_tuple": ["string_utils", "manipulation.py"], "lineno": 295, "context_start_lineno": 0}}
