{"prompt": "# Here are some relevant code fragments from other files of the repo:\n# --------------------------------------------------\n# the below code fragment can be found in:\n# cfg.py\n# --------------------------------------------------\n# import functools\n# from typing import Callable, Dict, Optional, TypeVar, Union\n# \n# from marshmallow.fields import Field as MarshmallowField\n# \n# from dataclasses_json.undefined import Undefined, UndefinedParameterError\n# \n# T = TypeVar(\"T\")\n# \n# \n# class Exclude:\n#     \"\"\"\n#     Pre-defined constants for exclusion. By default, fields are configured to\n#     be included.\n#     \"\"\"\n#     ALWAYS: Callable[[T], bool] = lambda _: True\n#     NEVER: Callable[[T], bool] = lambda _: False\n# \n# \n# # TODO: add warnings?\n# --------------------------------------------------\n# the below code fragment can be found in:\n# undefined.py\n# --------------------------------------------------\n# import abc\n# import dataclasses\n# import functools\n# import inspect\n# from dataclasses import Field, fields\n# from typing import Any, Callable, Dict, Optional, Tuple\n# from enum import Enum\n# \n# from marshmallow import ValidationError\n# --------------------------------------------------\n# the below code fragment can be found in:\n# mm.py\n# --------------------------------------------------\n# from uuid import UUID\n# from enum import Enum\n# \n# from typing_inspect import is_union_type  # type: ignore\n# \n# from marshmallow import fields, Schema, post_load\n# from marshmallow_enum import EnumField  # type: ignore\n# from marshmallow.exceptions import ValidationError\n# \n# from dataclasses_json.core import (_is_supported_generic, _decode_dataclass,\n#                                    _ExtendedEncoder, _user_overrides_or_exts)\n# from dataclasses_json.utils import (_is_collection, _is_optional,\n#                                     _issubclass_safe, _timestamp_to_dt_aware,\n#                                     _is_new_type, _get_type_origin,\n#                                     _handle_undefined_parameters_safe,\n#                                     CatchAllVar)\n# \n# \n# class _TimestampField(fields.Field):\n#     def _serialize(self, value, attr, obj, **kwargs):\n# --------------------------------------------------\n# the below code fragment can be found in:\n# api.py\n# --------------------------------------------------\n# import abc\n# import json\n# from enum import Enum\n# from typing import (Any, Callable, Dict, List, Optional, Tuple, Type, TypeVar,\n#                     Union)\n# \n# from stringcase import (camelcase, pascalcase, snakecase,\n#                         spinalcase)  # type: ignore\n# \n# from dataclasses_json.cfg import config\n# from dataclasses_json.core import (Json, _ExtendedEncoder, _asdict,\n#                                    _decode_dataclass)\n# from dataclasses_json.mm import (JsonData, SchemaType, build_schema)\n# from dataclasses_json.undefined import Undefined\n# from dataclasses_json.utils import (_handle_undefined_parameters_safe,\n#                                     _undefined_parameter_action_safe)\n# \n# A = TypeVar('A', bound=\"DataClassJsonMixin\")\n# B = TypeVar('B')\n# C = TypeVar('C')\n# --------------------------------------------------\n# the below code fragment can be found in:\n# __init__.py\n# --------------------------------------------------\n# # flake8: noqa\n# from dataclasses_json.api import (DataClassJsonMixin,\n#                                   LetterCase,\n#                                   dataclass_json)\n# from dataclasses_json.cfg import config, global_config, Exclude\n# from dataclasses_json.undefined import CatchAll, Undefined\n# --------------------------------------------------\n# the below code fragment can be found in:\n# undefined.py\n# --------------------------------------------------\n#                                 f\"'{known[catch_all_field.name]}'\"\n#                 raise UndefinedParameterError(error_message)\n#         else:\n#             value_to_write = unknown\n# \n#         known[catch_all_field.name] = value_to_write\n#         return known\n# \n#     @staticmethod\n#     def _get_default(catch_all_field: Field) -> Any:\n#         # access to the default factory currently causes\n#         # a false-positive mypy error (16. Dec 2019):\n#         # https://github.com/python/mypy/issues/6910\n# \n#         # noinspection PyProtectedMember\n#         has_default = not isinstance(catch_all_field.default,\n#                                      dataclasses._MISSING_TYPE)\n#         # noinspection PyProtectedMember\n#         has_default_factory = not isinstance(catch_all_field.default_factory,\n#                                              # type: ignore\n# --------------------------------------------------\n# the below code fragment can be found in:\n# undefined.py\n# --------------------------------------------------\n#         # access to the default factory currently causes\n#         # a false-positive mypy error (16. Dec 2019):\n#         # https://github.com/python/mypy/issues/6910\n# \n#         # noinspection PyProtectedMember\n#         has_default = not isinstance(catch_all_field.default,\n#                                      dataclasses._MISSING_TYPE)\n#         # noinspection PyProtectedMember\n#         has_default_factory = not isinstance(catch_all_field.default_factory,\n#                                              # type: ignore\n#                                              dataclasses._MISSING_TYPE)\n#         default_value = _CatchAllUndefinedParameters._SentinelNoDefault\n#         if has_default:\n#             default_value = catch_all_field.default\n#         elif has_default_factory:\n#             # This might be unwanted if the default factory constructs\n#             # something expensive,\n#             # because we have to construct it again just for this test\n#             default_value = catch_all_field.default_factory()  # type: ignore\n# --------------------------------------------------\n# the below code fragment can be found in:\n# api.py\n# --------------------------------------------------\n# import abc\n# import json\n# from enum import Enum\n# from typing import (Any, Callable, Dict, List, Optional, Tuple, Type, TypeVar,\n#                     Union)\n# \n# from stringcase import (camelcase, pascalcase, snakecase,\n#                         spinalcase)  # type: ignore\n# \n# from dataclasses_json.cfg import config\n# --------------------------------------------------\n# the below code fragment can be found in:\n# mm.py\n# --------------------------------------------------\n# # flake8: noqa\n# \n# import typing\n# import warnings\n# import sys\n# from copy import deepcopy\n# \n# from dataclasses import MISSING, is_dataclass, fields as dc_fields\n# from datetime import datetime\n# from decimal import Decimal\n# from uuid import UUID\n# from enum import Enum\n# \n# from typing_inspect import is_union_type  # type: ignore\n# \n# from marshmallow import fields, Schema, post_load\n# from marshmallow_enum import EnumField  # type: ignore\n# from marshmallow.exceptions import ValidationError\n# \n# from dataclasses_json.core import (_is_supported_generic, _decode_dataclass,\n# --------------------------------------------------\n# the below code fragment can be found in:\n# mm.py\n# --------------------------------------------------\n# # flake8: noqa\n# \n# import typing\n# import warnings\n# import sys\n# from copy import deepcopy\n# \n# from dataclasses import MISSING, is_dataclass, fields as dc_fields\n# from datetime import datetime\n# from decimal import Decimal\n# --------------------------------------------------\n\ndef _decode_letter_case_overrides(field_names, overrides):\n    \"\"\"Override letter case of field names for encode/decode\"\"\"\n", "metadata": {"task_id": "dataclasses_json/id0", "ground_truth": "def _decode_letter_case_overrides(field_names, overrides):\n    \"\"\"Override letter case of field names for encode/decode\"\"\"\n    names = {}\n    for field_name in field_names:\n        field_override = overrides.get(field_name)\n        if field_override is not None:\n            letter_case = field_override.letter_case\n            if letter_case is not None:\n                names[letter_case(field_name)] = field_name\n    return names", "fpath_tuple": ["dataclasses_json", "core.py"], "function_name": "_decode_letter_case_overrides", "lineno": 0, "context_start_lineno": 0, "_id": 0, "query_window": {"context": "import copy\nimport json\nimport warnings\nfrom collections import defaultdict, namedtuple\n# noinspection PyProtectedMember\nfrom dataclasses import (MISSING,\n                         _is_dataclass_instance,\n                         fields,\n                         is_dataclass  # type: ignore\n                         )", "metadata": {"fpath_tuple": ["dataclasses_json", "core.py"], "line_no": 0, "task_id": "dataclasses_json/id0", "start_line_no": 0, "end_line_no": 10, "window_size": 20, "context_start_lineno": 0, "repo": "dataclasses_json", "_id": 0}}, "top_k_context": [{"context": "# flake8: noqa\n\nimport typing\nimport warnings\nimport sys\nfrom copy import deepcopy\n\nfrom dataclasses import MISSING, is_dataclass, fields as dc_fields\nfrom datetime import datetime\nfrom decimal import Decimal", "metadata": [{"fpath_tuple": ["dataclasses_json", "mm.py"], "line_no": 0, "start_line_no": 0, "end_line_no": 10, "window_size": 20, "repo": "dataclasses_json", "slice_size": 2}], "sim_score": 0.31666666666666665}, {"context": "# flake8: noqa\n\nimport typing\nimport warnings\nimport sys\nfrom copy import deepcopy\n\nfrom dataclasses import MISSING, is_dataclass, fields as dc_fields\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom uuid import UUID\nfrom enum import Enum\n\nfrom typing_inspect import is_union_type  # type: ignore\n\nfrom marshmallow import fields, Schema, post_load\nfrom marshmallow_enum import EnumField  # type: ignore\nfrom marshmallow.exceptions import ValidationError\n\nfrom dataclasses_json.core import (_is_supported_generic, _decode_dataclass,", "metadata": [{"fpath_tuple": ["dataclasses_json", "mm.py"], "line_no": 10, "start_line_no": 0, "end_line_no": 20, "window_size": 20, "repo": "dataclasses_json", "slice_size": 2}], "sim_score": 0.2857142857142857}, {"context": "import abc\nimport json\nfrom enum import Enum\nfrom typing import (Any, Callable, Dict, List, Optional, Tuple, Type, TypeVar,\n                    Union)\n\nfrom stringcase import (camelcase, pascalcase, snakecase,\n                        spinalcase)  # type: ignore\n\nfrom dataclasses_json.cfg import config", "metadata": [{"fpath_tuple": ["dataclasses_json", "api.py"], "line_no": 0, "start_line_no": 0, "end_line_no": 10, "window_size": 20, "repo": "dataclasses_json", "slice_size": 2}], "sim_score": 0.22666666666666666}, {"context": "        # access to the default factory currently causes\n        # a false-positive mypy error (16. Dec 2019):\n        # https://github.com/python/mypy/issues/6910\n\n        # noinspection PyProtectedMember\n        has_default = not isinstance(catch_all_field.default,\n                                     dataclasses._MISSING_TYPE)\n        # noinspection PyProtectedMember\n        has_default_factory = not isinstance(catch_all_field.default_factory,\n                                             # type: ignore\n                                             dataclasses._MISSING_TYPE)\n        default_value = _CatchAllUndefinedParameters._SentinelNoDefault\n        if has_default:\n            default_value = catch_all_field.default\n        elif has_default_factory:\n            # This might be unwanted if the default factory constructs\n            # something expensive,\n            # because we have to construct it again just for this test\n            default_value = catch_all_field.default_factory()  # type: ignore\n", "metadata": [{"fpath_tuple": ["dataclasses_json", "undefined.py"], "line_no": 180, "start_line_no": 170, "end_line_no": 190, "window_size": 20, "repo": "dataclasses_json", "slice_size": 2}], "sim_score": 0.20967741935483872}, {"context": "                                f\"'{known[catch_all_field.name]}'\"\n                raise UndefinedParameterError(error_message)\n        else:\n            value_to_write = unknown\n\n        known[catch_all_field.name] = value_to_write\n        return known\n\n    @staticmethod\n    def _get_default(catch_all_field: Field) -> Any:\n        # access to the default factory currently causes\n        # a false-positive mypy error (16. Dec 2019):\n        # https://github.com/python/mypy/issues/6910\n\n        # noinspection PyProtectedMember\n        has_default = not isinstance(catch_all_field.default,\n                                     dataclasses._MISSING_TYPE)\n        # noinspection PyProtectedMember\n        has_default_factory = not isinstance(catch_all_field.default_factory,\n                                             # type: ignore", "metadata": [{"fpath_tuple": ["dataclasses_json", "undefined.py"], "line_no": 170, "start_line_no": 160, "end_line_no": 180, "window_size": 20, "repo": "dataclasses_json", "slice_size": 2}], "sim_score": 0.20161290322580644}, {"context": "# flake8: noqa\nfrom dataclasses_json.api import (DataClassJsonMixin,\n                                  LetterCase,\n                                  dataclass_json)\nfrom dataclasses_json.cfg import config, global_config, Exclude\nfrom dataclasses_json.undefined import CatchAll, Undefined", "metadata": [{"fpath_tuple": ["dataclasses_json", "__init__.py"], "line_no": 0, "start_line_no": 0, "end_line_no": 6, "window_size": 20, "repo": "dataclasses_json", "slice_size": 2}], "sim_score": 0.1780821917808219}, {"context": "import abc\nimport json\nfrom enum import Enum\nfrom typing import (Any, Callable, Dict, List, Optional, Tuple, Type, TypeVar,\n                    Union)\n\nfrom stringcase import (camelcase, pascalcase, snakecase,\n                        spinalcase)  # type: ignore\n\nfrom dataclasses_json.cfg import config\nfrom dataclasses_json.core import (Json, _ExtendedEncoder, _asdict,\n                                   _decode_dataclass)\nfrom dataclasses_json.mm import (JsonData, SchemaType, build_schema)\nfrom dataclasses_json.undefined import Undefined\nfrom dataclasses_json.utils import (_handle_undefined_parameters_safe,\n                                    _undefined_parameter_action_safe)\n\nA = TypeVar('A', bound=\"DataClassJsonMixin\")\nB = TypeVar('B')\nC = TypeVar('C')", "metadata": [{"fpath_tuple": ["dataclasses_json", "api.py"], "line_no": 10, "start_line_no": 0, "end_line_no": 20, "window_size": 20, "repo": "dataclasses_json", "slice_size": 2}], "sim_score": 0.17796610169491525}, {"context": "from uuid import UUID\nfrom enum import Enum\n\nfrom typing_inspect import is_union_type  # type: ignore\n\nfrom marshmallow import fields, Schema, post_load\nfrom marshmallow_enum import EnumField  # type: ignore\nfrom marshmallow.exceptions import ValidationError\n\nfrom dataclasses_json.core import (_is_supported_generic, _decode_dataclass,\n                                   _ExtendedEncoder, _user_overrides_or_exts)\nfrom dataclasses_json.utils import (_is_collection, _is_optional,\n                                    _issubclass_safe, _timestamp_to_dt_aware,\n                                    _is_new_type, _get_type_origin,\n                                    _handle_undefined_parameters_safe,\n                                    CatchAllVar)\n\n\nclass _TimestampField(fields.Field):\n    def _serialize(self, value, attr, obj, **kwargs):", "metadata": [{"fpath_tuple": ["dataclasses_json", "mm.py"], "line_no": 20, "start_line_no": 10, "end_line_no": 30, "window_size": 20, "repo": "dataclasses_json", "slice_size": 2}], "sim_score": 0.15384615384615385}, {"context": "import abc\nimport dataclasses\nimport functools\nimport inspect\nfrom dataclasses import Field, fields\nfrom typing import Any, Callable, Dict, Optional, Tuple\nfrom enum import Enum\n\nfrom marshmallow import ValidationError\n", "metadata": [{"fpath_tuple": ["dataclasses_json", "undefined.py"], "line_no": 0, "start_line_no": 0, "end_line_no": 10, "window_size": 20, "repo": "dataclasses_json", "slice_size": 2}], "sim_score": 0.14925373134328357}, {"context": "import functools\nfrom typing import Callable, Dict, Optional, TypeVar, Union\n\nfrom marshmallow.fields import Field as MarshmallowField\n\nfrom dataclasses_json.undefined import Undefined, UndefinedParameterError\n\nT = TypeVar(\"T\")\n\n\nclass Exclude:\n    \"\"\"\n    Pre-defined constants for exclusion. By default, fields are configured to\n    be included.\n    \"\"\"\n    ALWAYS: Callable[[T], bool] = lambda _: True\n    NEVER: Callable[[T], bool] = lambda _: False\n\n\n# TODO: add warnings?", "metadata": [{"fpath_tuple": ["dataclasses_json", "cfg.py"], "line_no": 10, "start_line_no": 0, "end_line_no": 20, "window_size": 20, "repo": "dataclasses_json", "slice_size": 2}], "sim_score": 0.14285714285714285}], "window_size": 20, "slice_size": 2}}